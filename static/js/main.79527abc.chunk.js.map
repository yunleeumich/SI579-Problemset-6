{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","input","setInput","savedWords","setSvaedWords","showName","setshowName","showList","setShowList","makeShowList","data","isRhyme","length","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","push","result","Array","from","keys","sort","key","groupBy","ele","num","Number","map","item","word","className","onClick","tempList","concat","Math","random","clickOnRhyme","fetch","URLSearchParams","rel_rhy","toString","then","response","json","err","console","log","href","target","id","join","type","placeholder","value","onChange","e","onKeyDown","event","ml","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79527abc.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState, useRef } from \"react\";\n\n// groupby function\nfunction groupBy(objects, property) {\n  // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n  // value for property (obj[property])\n  if (typeof property !== \"function\") {\n    const propName = property;\n    property = (obj) => obj[propName];\n  }\n\n  const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n  for (const object of objects) {\n    const groupName = property(object);\n    //Make sure that the group exists\n    if (!groupedObjects.has(groupName)) {\n      groupedObjects.set(groupName, []);\n    }\n    groupedObjects.get(groupName).push(object);\n  }\n\n  // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n  const result = {};\n  for (const key of Array.from(groupedObjects.keys()).sort()) {\n    result[key] = groupedObjects.get(key);\n  }\n  return result;\n}\n\n// Add \"s\" or not\nfunction addS(num) {\n  if (num === 1) {\n    return \"\";\n  } else {\n    return \"s\";\n  }\n}\n\nfunction App() {\n\n  const [input, setInput] = useState(\"\");\n  const [savedWords, setSvaedWords] = useState([]);\n  const [showName, setshowName] = useState(\"\");\n  const [showList, setShowList] = useState(<ul></ul>);\n\n  const makeShowList = (data, isRhyme) =>{\n    if(data.length ===0){\n      setshowName(\"(no results)\")\n      return\n    }\n    if (isRhyme) {\n      data = groupBy(data, \"numSyllables\");\n      let result = [];\n      for (let ele in data) {\n        result.push(\n          <div key={Math.random()}>\n            <h3 >{ele + ' syllable' + addS(Number)}</h3>\n            <ul>\n              {data[ele].map((item) => {\n                return (\n                  <li key={Math.random()}>\n                    {item.word}\n                    <button className=\"btn btn-outline-success\" onClick={() => {\n                      setSvaedWords((savedWords) => {\n                        const tempList = savedWords.concat();\n                        tempList.push(item.word)\n                        return tempList\n                      })\n                    }}>(save)</button>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        );\n      }\n      return result;\n    } else{\n      return data.map((item) => (\n        <li key={Math.random()}>\n          {item.word}\n          <button className=\"btn btn-outline-success\" onClick={() => {\n            setSvaedWords((savedWords) => {\n              const tempList = savedWords.concat();\n              tempList.push(item.word);\n              return tempList\n            })\n          }}>(save)</button>\n        </li>\n      ))\n    }\n}\n\n\n\nconst clickOnRhyme = () => {\n  setshowName('...loading');\n  setShowList();\n  fetch(\n    `https://api.datamuse.com/words?${new URLSearchParams({\n      rel_rhy: input,\n    }).toString()}`\n  ).then((response) => response.json())\n  .then((data) => {\n    setshowName(`Words that rhyme with ${input}: `);\n    setShowList(makeShowList(data, true));\n  }, \n  (err) => {\n    console.log('err');\n  });\n}\n\n\nconst clickOnSynonyms = () => {\n  setshowName('...loading');\n  setShowList();\n  fetch(\n    `https://api.datamuse.com/words?${new URLSearchParams({\n      ml: input,\n    }).toString()}`\n  ).then((response) => response.json())\n  .then((data) => {\n    setshowName(`Words with a meaning similar to ${input}: `);\n    setShowList(makeShowList(data, false));\n  }, \n  (err) => {\n    console.log('err');\n  });\n}\n\n\n// HITS \"ENTER\", SHOW RHYMING WORDS\nconst pressEnter = (event) =>{\n  if (event.key === 'Enter'){\n    clickOnRhyme()\n  }\n}\n\nreturn (\n  <div className=\"App\">\n    <div>Repo Address: <a href=\"https://github.com/yunleeumich/si579_problemset_6\"\n        target=\"_blank\">https://github.com/yunleeumich/si579_problemset_6</a>\n    </div>\n    <div>\n      <h1 className=\"row\">Rhyme Finder (579 Probelm Set 6)</h1>\n      <div className=\"row\">\n        <div className=\"col\">\n          Saved words: <span id=\"saved_words\">{savedWords.join(\", \")}</span>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"input-group col\">\n          <input className=\"form-control\" type=\"text\" placeholder=\"Enter a word\" value={input} onChange={(e) => {\n            setInput(e.target.value);\n            }} onKeyDown={pressEnter}/>\n          \n          <button id=\"show_rhymes\" type = \"button\" className=\"btn btn-primary\" onClick={clickOnRhyme}>\n            Show rhyming words\n          </button>\n          <button id=\"show_synonyms\" type=\"button\" className=\"btn btn-secondary\" onClick={clickOnSynonyms}>\n            Show synonyms\n          </button>\n        </div>\n      </div>\n      <div className=\"row\">\n        <h2 className=\"col\" id=\"output_description\">\n          {showName}\n        </h2>\n      </div>\n      <div className=\"output row\">\n        <output id=\"word_output\" className=\"col\">\n          {showList}\n        </output>\n      </div>\n    </div>\n  </div>\n);\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}